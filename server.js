const express = require('express');
const dotenv = require('dotenv');
const { DateTime } = require('luxon');
const winston = require('winston');
const TelegramBot = require('node-telegram-bot-api');
const SheetsDB = require('./sheets');
const fetchData = require('./fetchData.cjs');
const data = require('./data.js');
const Fuse = require('fuse.js');

const cities = Object.keys(data.streets);
const fuseCities = new Fuse(cities, { threshold: 0.4 });

dotenv.config();

const app = express();
app.use(express.json());
app.use(express.static('public'));

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const bot = new TelegramBot(TELEGRAM_TOKEN);

const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console()
    ],
});

const db = new SheetsDB(logger);

async function getDtekInfo(chatId) {
    const row = await db.getLightState(chatId);
    if (!row || !row.city || !row.street || !row.house_number) {
        return '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /address –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.';
    }
    const { city, street, house_number } = row;
    try {
        const result = await fetchData(city, street, house_number);
        if (result) {
            const { data, updateTimestamp } = result;
            const houseData = data[house_number] || {};
            if (!houseData.sub_type) {
                return `–ü–æ –∞–¥—Ä–µ—Å—É ${city}, ${street}, ${house_number} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–µ—Ç. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTimestamp}`;
            }
            return `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTimestamp}\n\n–ê–¥—Ä–µ—Å: ${city}, ${street}, ${house_number}\n–¢–∏–ø: ${houseData.sub_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–ù–∞—á–∞–ª–æ: ${houseData.start_date || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${houseData.end_date || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–¢–∏–ø –ø—Ä–∏—á–∏–Ω—ã: ${houseData.sub_type_reason?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
        } else {
            return `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${city}, ${street}, ${house_number}.`;
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö DTEK:', error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.';
    }
}

function getCurrentStatusMessage(row) {
    const currentDuration = DateTime.now().diff(parseDateTime(row.light_start_time));
    const icon = row.light_state ? 'üí°' : 'üåë';
    const state = row.light_state ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù';
    const duration = currentDuration.toFormat('d\'–¥\' h\'—á\' m\'–º–∏–Ω\' s\'—Å\'');
    return `${icon} –°–≤–µ—Ç ${state}\n‚è±${duration}`;
}

async function updatePinnedMessage(chatId, message) {
    try {
        const row = await db.getLightState(chatId);
        if (!row) return;
        const messageToSend = message || getCurrentStatusMessage(row);
        const pinnedMessageId = row.pinned_message_id;
        if (pinnedMessageId) {
            try {
                await bot.editMessageText(messageToSend, { chat_id: chatId, message_id: pinnedMessageId });
                if (message) logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${message}`);
            } catch (error) {
                if (!error.message.includes('message is not modified')) throw error;
            }
        } else {
            const sentMsg = await bot.sendMessage(chatId, messageToSend);
            await bot.pinChatMessage(chatId, sentMsg.message_id);
            await db.savePinnedMessageId(chatId, sentMsg.message_id);
            if (message) logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: ${message}`);
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatId}: ${error.message}`);
    }
}

function parseDateTime(timeString) {
    const cleanString = timeString.startsWith("'") ? timeString.substring(1) : timeString;
    const formats = ['dd.MM.yyyy HH:mm:ss', 'dd.MM.yyyy H:mm:ss'];
    for (const fmt of formats) {
        const dt = DateTime.fromFormat(cleanString, fmt);
        if (dt.isValid) return dt;
    }
    const dt = DateTime.fromISO(cleanString);
    if (dt.isValid) return dt;
    logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è: ${timeString}`);
    return DateTime.now();
}

async function notifyStatusChange(chatId, statusMessage) {
    await updatePinnedMessage(chatId);
    await bot.sendMessage(chatId, statusMessage).then(() => logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`)).catch((error) => logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`));
}

async function updatePingTime(chatId) {
    const now = DateTime.now();
    logger.info(`–ü–æ–ª—É—á–µ–Ω –ø–∏–Ω–≥ –æ—Ç ${chatId}`);
    const row = await db.getLightState(chatId);
    if (!row) {
        await db.saveLightState(chatId, now, true, now, null);
        await updatePinnedMessage(chatId);
        return bot.sendMessage(chatId, `üí° –°–≤–µ—Ç –í–ö–õ–Æ–ß–ï–ù`).then(() => logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`)).catch((error) => logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`));
    }
    const lightStartTime = parseDateTime(row.light_start_time);
    const isLightOn = row.light_state;
    if (isLightOn) {
        await db.saveLightState(chatId, now, true, lightStartTime, null);
        await updatePinnedMessage(chatId);
        logger.info(`–°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω last_ping_time –¥–ª—è ${chatId}`);
    } else {
        const offDuration = now.diff(lightStartTime);
        await db.saveLightState(chatId, now, true, now, null);
        await notifyStatusChange(chatId, `üí° –°–≤–µ—Ç –í–ö–õ–Æ–ß–ï–ù\n‚è∏ –ë—ã–ª –≤—ã–∫–ª—é—á–µ–Ω: ${offDuration.toFormat('hh:mm:ss')}`);
        logger.info(`–°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è ${chatId} (–±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω ${offDuration.toFormat('hh:mm:ss')})`);
    }
}

async function checkLightsStatus() {
    try {
        const now = DateTime.now();
        const rows = await db.getAllLightStates();
        for (const row of rows) {
            const lastPingTime = parseDateTime(row.last_ping_time);
            const timeSinceLastPing = now.diff(lastPingTime).as('seconds');
            if (timeSinceLastPing > 180 && row.light_state) {
                const lightStartTime = parseDateTime(row.light_start_time);
                const onDuration = now.diff(lightStartTime);
                await db.saveLightState(row.chat_id, now, false, now, onDuration);
                await notifyStatusChange(row.chat_id, `üåë –°–≤–µ—Ç –í–´–ö–õ–Æ–ß–ï–ù\n‚è∏ –ë—ã–ª –≤–∫–ª—é—á–µ–Ω: ${onDuration.toFormat('hh:mm:ss')}`);
                logger.info(`–°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è ${row.chat_id} (–Ω–µ—Ç –ø–∏–Ω–≥–∞ ${Math.round(timeSinceLastPing)}s)`);
                // –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç DTEK
                const dtekMessage = await getDtekInfo(row.chat_id);
                await bot.sendMessage(row.chat_id, dtekMessage).catch((error) => logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTEK: ${error}`));
            } else {
                await updatePinnedMessage(row.chat_id);
                logger.info(`–ú–∞—Å—Ç–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${row.chat_id} (${row.light_state ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'})`);
            }
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
    }
}

app.get('/check-lights', async (req, res) => {
    await checkLightsStatus();
    res.json({ status: 'ok', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' });
});

const handlePing = (req, res) => {
    const chatId = req.body?.chat_id || req.query?.c || req.query?.chat_id;
    if (chatId) updatePingTime(chatId);
    res.send("OK");
};

app.post('/ping', handlePing);
app.get('/ping', handlePing);
app.get('/p', handlePing);

app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.onText(/\/status(?:@\w+)?/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç ${chatId} –≤ —á–∞—Ç–µ —Ç–∏–ø–∞ ${msg.chat.type}`);
    const row = await db.getLightState(chatId);
    if (!row) {
        return bot.sendMessage(chatId, `‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è chat_id ${chatId}`);
    }
    const currentDuration = DateTime.now().diff(parseDateTime(row.light_start_time));
    const icon = row.light_state ? 'üí°' : 'üåë';
    const state = row.light_state ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù';
    const prevDuration = row.previous_duration || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const message = `${icon} –°–≤–µ—Ç ${state}\n‚è± –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${currentDuration.toFormat('hh:mm:ss')}\nüìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${prevDuration}`;
    bot.sendMessage(chatId, message);
    logger.info(`–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${chatId}`);
});

bot.onText(/\/address(?:@\w+)?/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`–ö–æ–º–∞–Ω–¥–∞ /address –æ—Ç ${chatId} –≤ —á–∞—Ç–µ —Ç–∏–ø–∞ ${msg.chat.type}`);
    userSessions[chatId] = { step: 'city' };
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.');
});

bot.onText(/\/dtek(?:@\w+)?/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`–ö–æ–º–∞–Ω–¥–∞ /dtek –æ—Ç ${chatId} –≤ —á–∞—Ç–µ —Ç–∏–ø–∞ ${msg.chat.type}`);
    const message = await getDtekInfo(chatId);
    bot.sendMessage(chatId, message);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: "${text}" –æ—Ç ${chatId} –≤ —á–∞—Ç–µ —Ç–∏–ø–∞ ${msg.chat.type}`);

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && (/^\/status(?:@\w+)?/.test(text) || /^\/address(?:@\w+)?/.test(text) || /^\/dtek(?:@\w+)?/.test(text))) {
        return;
    }

    if (userSessions[chatId]) {
        const session = userSessions[chatId];
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è ${chatId}, —à–∞–≥: ${session.step}`);
        try {
            switch (session.step) {
                case 'city':
                    if (text.trim() === '') {
                        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                        return;
                    }
                    if (!data.streets[text]) {
                        const results = fuseCities.search(text);
                        if (results.length > 0) {
                            const suggestions = results.slice(0, 5);
                            session.citySuggestions = suggestions;
                            const keyboard = {
                                inline_keyboard: suggestions.map((r, i) => [{ text: r.item, callback_data: `select_city_${i}` }])
                            };
                            bot.sendMessage(chatId, `–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:`, { reply_markup: keyboard });
                        } else {
                            bot.sendMessage(chatId, '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ DTEK.');
                        }
                        return;
                    }
                    session.city = text;
                    session.step = 'street';
                    console.log(`–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${text} –¥–ª—è ${chatId}`);
                    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã.');
                    break;
                case 'street':
                    if (text.trim() === '') {
                        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                        return;
                    }
                    if (!data.streets[session.city].includes(text)) {
                        const fuseStreets = new Fuse(data.streets[session.city], { threshold: 0.4 });
                        const results = fuseStreets.search(text);
                        if (results.length > 0) {
                            const suggestions = results.slice(0, 5);
                            session.streetSuggestions = suggestions;
                            const keyboard = {
                                inline_keyboard: suggestions.map((r, i) => [{ text: r.item, callback_data: `select_street_${i}` }])
                            };
                            bot.sendMessage(chatId, `–£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:`, { reply_markup: keyboard });
                        } else {
                            bot.sendMessage(chatId, '–£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞ DTEK.');
                        }
                        return;
                    }
                    session.street = text;
                    session.step = 'houseNumber';
                    console.log(`–£–ª–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${text} –¥–ª—è ${chatId}`);
                    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞.');
                    break;
                case 'houseNumber':
                    if (text.trim() === '') {
                        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                        return;
                    }
                    session.houseNumber = text;
                    session.step = 'completed';
                    await db.saveAddress(chatId, session.city, session.street, session.houseNumber);
                    console.log(`–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${session.city}, ${session.street}, ${text} –¥–ª—è ${chatId}`);
                    bot.sendMessage(chatId, `–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${session.city}, ${session.street}, ${session.houseNumber}`);
                    delete userSessions[chatId];
                    break;
                default:
                    bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø. –ù–∞—á–Ω–∏—Ç–µ —Å /address.');
                    delete userSessions[chatId];
                    break;
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è ${chatId}: ${error.message}`);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            delete userSessions[chatId];
        }
    }
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('select_city_')) {
        const index = parseInt(data.replace('select_city_', ''));
        if (userSessions[chatId] && userSessions[chatId].citySuggestions && userSessions[chatId].citySuggestions[index]) {
            const city = userSessions[chatId].citySuggestions[index].item;
            userSessions[chatId] = { step: 'street', city: city };
            console.log(`–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: ${city} –¥–ª—è ${chatId}`);
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã.');
        }
        bot.answerCallbackQuery(query.id);
    } else if (data.startsWith('select_street_')) {
        const index = parseInt(data.replace('select_street_', ''));
        if (userSessions[chatId] && userSessions[chatId].streetSuggestions && userSessions[chatId].streetSuggestions[index]) {
            const street = userSessions[chatId].streetSuggestions[index].item;
            userSessions[chatId].street = street;
            userSessions[chatId].step = 'houseNumber';
            console.log(`–£–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞: ${street} –¥–ª—è ${chatId}`);
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞.');
        }
        bot.answerCallbackQuery(query.id);
    }
});

const userSessions = {};
const previousStates = {};

const PORT = process.env.PORT || 5002;

(async () => {
    try {
        await db.initialize();
        logger.info('Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω');
        if (WEBHOOK_URL) {
            try {
                await bot.setWebHook(`${WEBHOOK_URL}/bot${TELEGRAM_TOKEN}`);
                logger.info(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}/bot${TELEGRAM_TOKEN}`);
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${error.message}`);
            }
        }
        app.listen(PORT, () => logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
        logger.info('–ó–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–µ—Ç–∞...');
        setInterval(checkLightsStatus, 60000);
        logger.info('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)');
        setTimeout(() => {
            logger.info('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
            checkLightsStatus();
        }, 2000);
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        process.exit(1);
    }
})();
