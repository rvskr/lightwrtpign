const express = require('express');
const dotenv = require('dotenv');
const { DateTime } = require('luxon');
const winston = require('winston');
const TelegramBot = require('node-telegram-bot-api');
const SheetsDB = require('./sheets');
const fetchData = require('./fetchData.cjs');
const data = require('./data.js');
const Fuse = require('fuse.js');

dotenv.config();

const app = express();
app.use(express.json());
app.use(express.static('public'));

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const bot = new TelegramBot(TELEGRAM_TOKEN);

const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [new winston.transports.Console()],
});

const db = new SheetsDB(logger);
const cities = Object.keys(data.streets);
const fuseCities = new Fuse(cities, { threshold: 0.4 });
const userSessions = {};
const userRateLimits = {};
const RATE_LIMIT_MS = 1000;

// –£—Ç–∏–ª–∏—Ç—ã
function checkRateLimit(chatId) {
    const now = Date.now();
    const lastRequest = userRateLimits[chatId];
    if (lastRequest && (now - lastRequest) < RATE_LIMIT_MS) return false;
    userRateLimits[chatId] = now;
    return true;
}

function parseDateTime(timeString) {
    if (!timeString?.trim()) return DateTime.now();
    const cleanString = timeString.startsWith("'") ? timeString.substring(1) : timeString;
    const formats = ['dd.MM.yyyy HH:mm:ss', 'dd.MM.yyyy H:mm:ss'];
    
    for (const fmt of formats) {
        const dt = DateTime.fromFormat(cleanString, fmt);
        if (dt.isValid) return dt;
    }
    
    const dt = DateTime.fromISO(cleanString);
    return dt.isValid ? dt : DateTime.now();
}

async function shouldSkipChat(chatId) {
    const row = await db.getLightState(chatId);
    return row?.ignored || false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ DTEK
async function getDtekInfo(chatId) {
    const row = await db.getLightState(chatId);
    if (!row?.city || !row?.street || !row?.house_number) {
        return '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /address –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.';
    }
    
    const { city, street, house_number } = row;
    try {
        const result = await fetchData(city, street, house_number);
        if (!result) return `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${city}, ${street}, ${house_number}.`;
        
        const { data, updateTimestamp } = result;
        const houseData = data[house_number] || {};
        
        if (!houseData.sub_type) {
            return `–ü–æ –∞–¥—Ä–µ—Å—É ${city}, ${street}, ${house_number} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–µ—Ç. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTimestamp}`;
        }
        
        return `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTimestamp}\n\n–ê–¥—Ä–µ—Å: ${city}, ${street}, ${house_number}\n–¢–∏–ø: ${houseData.sub_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–ù–∞—á–∞–ª–æ: ${houseData.start_date || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${houseData.end_date || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–¢–∏–ø –ø—Ä–∏—á–∏–Ω—ã: ${houseData.sub_type_reason?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö DTEK:', error);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function updatePinnedMessage(chatId, message) {
    if (await shouldSkipChat(chatId)) return;
    
    const row = await db.getLightState(chatId);
    const mode = row?.mode;
    
    if (mode === 'dtek_only') return; // –í —Ä–µ–∂–∏–º–µ dtek_only –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º pinned —Å–æ–æ–±—â–µ–Ω–∏—è
    
    try {
        if (!row) return;
        
        const messageToSend = message || getCurrentStatusMessage(row);
        const pinnedMessageId = row.pinned_message_id;
        
        if (pinnedMessageId) {
            try {
                await bot.editMessageText(messageToSend, { chat_id: chatId, message_id: pinnedMessageId });
            } catch (error) {
                if (!error.message.includes('message is not modified')) throw error;
            }
        } else {
            const sentMsg = await bot.sendMessage(chatId, messageToSend);
            await bot.pinChatMessage(chatId, sentMsg.message_id);
            await db.savePinnedMessageId(chatId, sentMsg.message_id);
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatId}: ${error.message}`);
    }
}

function getCurrentStatusMessage(row) {
    const currentDuration = DateTime.now().diff(parseDateTime(row.light_start_time));
    const icon = row.light_state ? 'üí°' : 'üåë';
    const state = row.light_state ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù';
    const duration = currentDuration.toFormat('d\'–¥\' h\'—á\' m\'–º–∏–Ω\' s\'—Å\'');
    return `${icon} –°–≤–µ—Ç ${state}\n‚è±${duration}`;
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function notifyStatusChange(chatId, statusMessage) {
    if (await shouldSkipChat(chatId)) return;
    updatePinnedMessage(chatId);
    await bot.sendMessage(chatId, statusMessage)
        .then(() => logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
        .catch((error) => logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏–Ω–≥–∞
async function updatePingTime(chatId) {
    if (await shouldSkipChat(chatId)) return;
    
    const now = DateTime.now();
    logger.info(`–ü–æ–ª—É—á–µ–Ω –ø–∏–Ω–≥ –æ—Ç ${chatId}`);
    const row = await db.getLightState(chatId);
    
    if (!row) {
        await db.saveLightState(chatId, now, true, now, null);
        const newRow = await db.getLightState(chatId);
        updatePinnedMessage(chatId, getCurrentStatusMessage(newRow));
        return bot.sendMessage(chatId, 'üí° –°–≤–µ—Ç –í–ö–õ–Æ–ß–ï–ù');
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å dtek_only –Ω–∞ full –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–∏–Ω–≥–µ
    if (row.mode === 'dtek_only') {
        await db.setMode(chatId, 'full');
        logger.info(`–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å dtek_only –Ω–∞ full –¥–ª—è ${chatId}`);
        return bot.sendMessage(chatId, 'üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\nüí° –°–≤–µ—Ç –í–ö–õ–Æ–ß–ï–ù');
    }
    
    const lightStartTime = parseDateTime(row.light_start_time);
    
    if (row.light_state) {
        await db.saveLightState(chatId, now, true, lightStartTime, null);
        const newRow = await db.getLightState(chatId);
        updatePinnedMessage(chatId, getCurrentStatusMessage(newRow));
        logger.info(`–°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω last_ping_time –¥–ª—è ${chatId}`);
    } else {
        const offDuration = now.diff(lightStartTime);
        await db.saveLightState(chatId, now, true, now, null);
        await notifyStatusChange(chatId, `üí° –°–≤–µ—Ç –í–ö–õ–Æ–ß–ï–ù\n‚è∏ –ë—ã–ª –≤—ã–∫–ª—é—á–µ–Ω: ${offDuration.toFormat('hh:mm:ss')}`);
        logger.info(`–°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è ${chatId} (–±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω ${offDuration.toFormat('hh:mm:ss')})`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ DTEK-only —Ä–µ–∂–∏–º–∞
async function checkDtekOnlyStatus() {
    try {
        const now = DateTime.now();
        const rows = await db.getAllLightStates();
        
        for (const row of rows) {
            if (row.mode !== 'dtek_only' || row.ignored || !row.city?.trim()) continue;
            
            const lastDtekCheck = row.last_ping_time ? parseDateTime(row.last_ping_time) : DateTime.now().minus({ minutes: 16 });
            const minutesSinceLastCheck = now.diff(lastDtekCheck).as('minutes');
            
            if (minutesSinceLastCheck >= 15) {
                await db.saveLightState(row.chat_id, now, false, now, null);
                const dtekMessage = await getDtekInfo(row.chat_id);
                await bot.sendMessage(row.chat_id, `üìä DTEK –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞):\n${dtekMessage}`)
                    .catch((error) => logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTEK: ${error}`));
                logger.info(`DTEK –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è ${row.chat_id} (—Ä–µ–∂–∏–º dtek_only, –ø—Ä–æ—à–ª–æ ${Math.round(minutesSinceLastCheck)} –º–∏–Ω—É—Ç)`);
            }
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ DTEK –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ—Ç–∞
async function checkLightsStatus() {
    try {
        const now = DateTime.now();
        const rows = await db.getAllLightStates();
        
        for (const row of rows) {
            if (row.ignored || !row.city?.trim() || row.mode !== 'full') continue;
            
            const hasDeviceConnected = row.last_ping_time?.trim() && row.light_start_time?.trim();
            if (!hasDeviceConnected) continue;
            
            const lastPingTime = parseDateTime(row.last_ping_time);
            const timeSinceLastPing = now.diff(lastPingTime).as('seconds');
            
            if (timeSinceLastPing > 180 && row.light_state) {
                const lightStartTime = parseDateTime(row.light_start_time);
                const onDuration = now.diff(lightStartTime);
                await db.saveLightState(row.chat_id, now, false, now, onDuration);
                await notifyStatusChange(row.chat_id, `üåë –°–≤–µ—Ç –í–´–ö–õ–Æ–ß–ï–ù\n‚è∏ –ë—ã–ª –≤–∫–ª—é—á–µ–Ω: ${onDuration.toFormat('hh:mm:ss')}`);
                logger.info(`–°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è ${row.chat_id} (–Ω–µ—Ç –ø–∏–Ω–≥–∞ ${Math.round(timeSinceLastPing)}s)`);
                
                const dtekMessage = await getDtekInfo(row.chat_id);
                await bot.sendMessage(row.chat_id, dtekMessage)
                    .catch((error) => logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTEK: ${error}`));
            } else {
                await updatePinnedMessage(row.chat_id);
                logger.info(`–ú–∞—Å—Ç–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${row.chat_id} (${row.light_state ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'})`);
            }
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
    }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/check-lights', async (req, res) => {
    await checkLightsStatus();
    res.json({ status: 'ok', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' });
});

const handlePing = async (req, res) => {
    const chatId = req.body?.chat_id || req.query?.c || req.query?.chat_id;
    if (chatId && !(await shouldSkipChat(chatId))) {
        updatePingTime(chatId);
    }
    res.send("OK");
};

app.post('/ping', handlePing);
app.get('/ping', handlePing);
app.get('/p', handlePing);

app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start(?:@\w+)?/, async (msg) => {
    const startTime = Date.now();
    const chatId = msg.chat.id;
    if (!checkRateLimit(chatId)) return;
    
    try {
        await db.setIgnored(chatId, false);
        await db.initializeUser(chatId);
        
        const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–µ—Ç–∞!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stop - –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–µ—Ç–∞
/address - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
/dtek - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É

üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
‚ö° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dtek –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥—Ä–µ—Å–∞.`;

        bot.sendMessage(chatId, welcomeMessage);
        logger.info(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${chatId} (–≤—Ä–µ–º—è: ${Date.now() - startTime} ms)`);
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –≤ /start –¥–ª—è ${chatId}: ${error.message}`);
    }
});

bot.onText(/\/stop(?:@\w+)?/, async (msg) => {
    const chatId = msg.chat.id;
    if (!checkRateLimit(chatId)) return;
    
    try {
        await db.setIgnored(chatId, true);
        bot.sendMessage(chatId, 'üö´ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        logger.info(`–°—Ç–∞—Ç—É—Å ignored –¥–ª—è ${chatId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –≤ /stop –¥–ª—è ${chatId}: ${error.message}`);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞.');
    }
});

bot.onText(/\/status(?:@\w+)?/, async (msg) => {
    const startTime = Date.now();
    const chatId = msg.chat.id;
    if (!checkRateLimit(chatId) || await shouldSkipChat(chatId)) return;
    
    const row = await db.getLightState(chatId);
    if (!row) {
        return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.');
    }
    
    const hasAddress = row.city?.trim();
    const mode = row.mode;
    
    // –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (!hasAddress) {
        return bot.sendMessage(chatId, 'üìç –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /address –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥—Ä–µ—Å–∞\nüîå –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–æ–≤');
    }
    
    // DTEK-only —Ä–µ–∂–∏–º
    if (mode === 'dtek_only') {
        const hasDeviceConnected = row.last_ping_time?.trim() && row.light_start_time?.trim();
        const dtekMessage = await getDtekInfo(chatId);
        
        if (!hasDeviceConnected) {
            return bot.sendMessage(chatId, `üìä –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ DTEK (–æ–∂–∏–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)\nüè† ${row.city}, ${row.street}, ${row.house_number}\n\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n${dtekMessage}`);
        } else {
            return bot.sendMessage(chatId, `üìä –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ DTEK\nüè† ${row.city}, ${row.street}, ${row.house_number}\n\n${dtekMessage}`);
        }
    }
    
    // –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const hasDeviceConnected = row.last_ping_time?.trim() && row.light_start_time?.trim() && row.last_ping_time !== row.light_start_time;
    if (!hasDeviceConnected) {
        return bot.sendMessage(chatId, `üìç –ê–¥—Ä–µ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\nüè† ${row.city}, ${row.street}, ${row.house_number}\n\nüí° –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /dtek –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö\nüîå –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–æ–≤`);
    }
    
    // –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
    const lightStartTime = parseDateTime(row.light_start_time);
    const currentDuration = DateTime.now().diff(lightStartTime);
    const icon = row.light_state ? 'üí°' : 'üåë';
    const state = row.light_state ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù';
    const prevDuration = row.previous_duration || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const message = `${icon} –°–≤–µ—Ç ${state}\n‚è± –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${currentDuration.toFormat('hh:mm:ss')}\nüìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${prevDuration}`;
    
    bot.sendMessage(chatId, message);
    logger.info(`–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${chatId} (–≤—Ä–µ–º—è: ${Date.now() - startTime} ms)`);
});

bot.onText(/\/address(?:@\w+)?/, async (msg) => {
    const chatId = msg.chat.id;
    if (!checkRateLimit(chatId) || await shouldSkipChat(chatId)) return;
    
    userSessions[chatId] = { step: 'city' };
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.');
});

bot.onText(/\/dtek(?:@\w+)?/, async (msg) => {
    const startTime = Date.now();
    const chatId = msg.chat.id;
    if (await shouldSkipChat(chatId) || !checkRateLimit(chatId)) return;
    
    const message = await getDtekInfo(chatId);
    bot.sendMessage(chatId, message);
    logger.info(`DTEK –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${chatId} (–≤—Ä–µ–º—è: ${Date.now() - startTime} ms)`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    if (await shouldSkipChat(chatId)) return;
    if (text && /^\/(start|stop|status|address|dtek)(?:@\w+)?/.test(text)) return;
    
    if (userSessions[chatId]) {
        const session = userSessions[chatId];
        
        try {
            switch (session.step) {
                case 'city':
                    if (!text?.trim()) {
                        return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                    }
                    
                    if (!data.streets[text]) {
                        const results = fuseCities.search(text);
                        if (results.length > 0) {
                            const suggestions = results.slice(0, 5);
                            session.citySuggestions = suggestions;
                            const keyboard = {
                                inline_keyboard: suggestions.map((r, i) => [{ text: r.item, callback_data: `select_city_${i}` }])
                            };
                            return bot.sendMessage(chatId, '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', { reply_markup: keyboard });
                        } else {
                            return bot.sendMessage(chatId, '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ DTEK.');
                        }
                    }
                    
                    session.city = text;
                    session.step = 'street';
                    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã.');
                    break;
                    
                case 'street':
                    if (!text?.trim()) {
                        return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                    }
                    
                    if (!data.streets[session.city].includes(text)) {
                        const fuseStreets = new Fuse(data.streets[session.city], { threshold: 0.4 });
                        const results = fuseStreets.search(text);
                        if (results.length > 0) {
                            const suggestions = results.slice(0, 5);
                            session.streetSuggestions = suggestions;
                            const keyboard = {
                                inline_keyboard: suggestions.map((r, i) => [{ text: r.item, callback_data: `select_street_${i}` }])
                            };
                            return bot.sendMessage(chatId, '–£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', { reply_markup: keyboard });
                        } else {
                            return bot.sendMessage(chatId, '–£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞ DTEK.');
                        }
                    }
                    
                    session.street = text;
                    session.step = 'houseNumber';
                    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞.');
                    break;
                    
                case 'houseNumber':
                    if (!text?.trim()) {
                        return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                    }
                    
                    session.houseNumber = text;
                    await db.saveAddress(chatId, session.city, session.street, session.houseNumber, 'dtek_only');
                    
                    bot.sendMessage(chatId, `–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${session.city}, ${session.street}, ${session.houseNumber}\nüìä –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ DTEK (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π)\n\nüîÑ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥`);
                    updatePinnedMessage(chatId);
                    delete userSessions[chatId];
                    break;
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è ${chatId}: ${error.message}`);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            delete userSessions[chatId];
        }
    }
});

// Callback query –æ–±—Ä–∞–±–æ—Ç–∫–∞
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    
    if (await shouldSkipChat(chatId)) return;
    
    if (data.startsWith('select_city_')) {
        const index = parseInt(data.replace('select_city_', ''));
        if (userSessions[chatId]?.citySuggestions?.[index]) {
            const city = userSessions[chatId].citySuggestions[index].item;
            userSessions[chatId] = { step: 'street', city: city };
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã.');
        }
    } else if (data.startsWith('select_street_')) {
        const index = parseInt(data.replace('select_street_', ''));
        if (userSessions[chatId]?.streetSuggestions?.[index]) {
            const street = userSessions[chatId].streetSuggestions[index].item;
            userSessions[chatId].street = street;
            userSessions[chatId].step = 'houseNumber';
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞.');
        }
    }
    bot.answerCallbackQuery(query.id);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5002;

(async () => {
    try {
        await db.initialize();
        logger.info('Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        if (WEBHOOK_URL) {
            await bot.setWebHook(`${WEBHOOK_URL}/bot${TELEGRAM_TOKEN}`);
            logger.info(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}/bot${TELEGRAM_TOKEN}`);
        }
        
        app.listen(PORT, () => logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
        
        setInterval(checkLightsStatus, 60000);
        logger.info('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)');
        
        setInterval(checkDtekOnlyStatus, 15 * 60 * 1000);
        logger.info('DTEK-only –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)');
        
        setTimeout(() => {
            logger.info('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
            checkLightsStatus();
        }, 2000);
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        process.exit(1);
    }
})();